#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail fast and fail hard.
set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2

mkdir -p $CACHE_DIR

if [ ! -e $CACHE_DIR/ghc ]; then
  # GHC_URL="http://s3.amazonaws.com/haskell-heroku-buildpack/ghc.tar.gz"
  GHC_URL="http://informatik.uni-kiel.de/~sad/ghc.tar.gz"
  echo "-----> Downloading GHC"
  curl -# --max-time 120 -L "$GHC_URL" | tar xz -C $CACHE_DIR
fi

# Restore GHC registry if available
if [ -e $CACHE_DIR/dotghc ]; then
  rm -rf $HOME/.ghc
  mv $CACHE_DIR/dotghc $HOME/.ghc
  ls $HOME/.ghc
else
  mv $CACHE_DIR/ghc $HOME
fi

# Restore Cabal cache or download an empty environemt
if [ -e $CACHE_DIR/cabal ]; then
  rm -rf $HOME/.cabal
  mv $CACHE_DIR/cabal $HOME/.cabal
elif [ ! -e $HOME/.cabal ]; then
  CABAL_URL="http://informatik.uni-kiel.de/~sad/cabal.tar.gz"
  echo "-----> Downloading Cabal"
  curl -# --max-time 120 -L "$CABAL_URL" | tar xz -C $HOME
fi

mkdir -p /app/usr/lib
ln -fs /usr/lib/libgmp.so.3 /app/usr/lib/libgmp.so

# find $CACHE_DIR/ghc -type f -print0

# GHC has shell scripts with a bunch of hardcoded references to
# /home/vagrant/ghc/*
#
# Let's murder it to death.
# find $CACHE_DIR/ghc -type f -print0 | xargs -0 perl -i -p -e  "s{/app/ghc}{$CACHE_DIR/ghc}g"

export PATH=/app/ghc/bin$PATH

echo "-----> Checking ghc-paths"
# export GHC_PACKAGE_PATH=$CACHE_DIR/ghc/lib/ghc-7.4.1/package.conf.d
# echo $GHC_PACKAGE_PATH
# ls $HOME
# ls /app
# which ghc
# which ghc-pkg

echo "-----> Check local libs"
ls /app/usr/lib

echo "-----> Check global libs"
ls /usr/lib

echo "-----> Setting up ghc-pkg"

# ghc-pkg recache
# ghc-pkg describe base > base.conf

# sed -i "s#ld-options:#ld-options: -L/app/lib#" base.conf
# perl -i -p -e  "s{/app/ghc}{$CACHE_DIR/ghc}g" base.conf
# ghc-pkg update base.conf
# rm base.conf 

# $CACHE_DIR/ghc/lib/ghc-7.4.1/ghc-pkg recache --global-conf=$GHC_PACKAGE_PATH
# $CACHE_DIR/ghc/lib/ghc-7.4.1/ghc-pkg check --global-conf=$GHC_PACKAGE_PATH

# ghc-pkg recache
# ghc-pkg describe base > base.conf

# sed -i "s#ld-options:#ld-options: -L$CACHE_DIR/lib#" base.conf
# # perl -i -p -e  "s{/app/ghc}{$CACHE_DIR/ghc}g" base.conf
# ghc-pkg update base.conf
# rm base.conf 

ghc-pkg recache
ghc-pkg check

export PATH=$HOME/.cabal/bin:$PATH

echo "-----> Updating Cabal"
cabal update

echo "-----> Release the hounds! Installing application"
cd $BUILD_DIR
# the ld library path hack is horrible, but let's see if it helps
LD_LIBRARY_PATH=/app/lib cabal install -j5 --disable-library-profiling --disable-executable-profiling --disable-shared

echo "-----> Caching Cabal packages"
shopt -s extglob
rm $HOME/.cabal/bin/!(cabal|happy)
mv $HOME/.cabal $CACHE_DIR/cabal
mv $HOME/ghc $CACHE_DIR/dotghc

echo "Cache dir size:"
du -ms $CACHE_DIR
echo "Build dir size:"
du -ms $BUILD_DIR