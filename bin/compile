#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Fail fast and fail hard.
set -eo pipefail

BUILD_DIR=$1
CACHE_DIR=$2

mkdir -p $CACHE_DIR

cd $BUILD_DIR
echo "build dir:"
ls -alR $BUILD_DIR

echo "cache dir:"
ls -alR $CACHE_DIR

if [ ! -e ghc ]; then
  GHC_URL="http://brianmckenna.org/files/heroku-buildpack-haskell/ghc.tar.gz"
  echo "-----> Downloading GHC"
  curl -# --max-time 120 -L "$GHC_URL" | tar xz
fi

if [ ! -e .cabal ]; then
  CABAL_URL="http://brianmckenna.org/files/heroku-buildpack-haskell/cabal.tar.gz"
  echo "-----> Bundling Cabal"
  curl -# --max-time 120 -L "$CABAL_URL" | tar xz -C $HOME
fi
mkdir -p bin

ln -s ghc/bin/ghc bin/ghc
ln -s ~/.cabal/bin/cabal bin/cabal

mkdir -p lib
ln -s /usr/lib/libgmp.so.3 lib/libgmp.so

# this is actually a shell script with a bunch of hardcoded
# references to /home/vagrant/ghc/*
#
# let's murder it to death.

find ghc -type f -print0 | xargs -0 perl -i -p -e  "s{/home/vagrant/ghc}{$BUILD_DIR/ghc}g"


echo "setting up ghc-pkg"
ghc/bin/ghc-pkg recache
echo "recached"
ghc/bin/ghc-pkg describe base > base.conf

sed -i "s#ld-options:#ld-options: -L`pwd`/lib#" base.conf
perl -i -p -e  "s{/home/vagrant/ghc}{$BUILD_DIR/ghc}g" base.conf
ghc/bin/ghc-pkg update base.conf
rm base.conf

ghc/bin/ghc-pkg recache
ghc/bin/ghc-pkg check

export PATH=`pwd`/ghc/bin:$PATH
echo "updating cabal"
~/.cabal/bin/cabal update
echo "release the hounds! Installing the app"
# the ld library path hack is horrible, but let's see if it helps

LD_LIBRARY_PATH=`pwd`/lib ~/.cabal/bin/cabal install --disable-library-profiling --disable-executable-profiling --disable-shared
echo "copying to build directory"
ls /app/.cabal
cp /app/.cabal/bin/* $BUILD_DIR

# need to delete everything we don't need
rm -rf ~/.cabal $BUILD_DIR/ghc

echo "Cachedir:"
du -ms $CACHE_DIR | sort -n | tail -10

echo "builddir:"
du -m $BUILD_DIR | sort -n |tail -10

echo "home"
du -m /app |sort -n |tail -10
ls $BUILD_DIR
du -ms $CACHE_DIR $BUILD_DIR . 
